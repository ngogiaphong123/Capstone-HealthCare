generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id             String  @id @default(uuid())
    phone          String  @unique
    email          String? @unique
    password       String
    name           String
    address        String? @db.Text
    avatarPublicId String? @unique
    avatar         String  @db.Text
    accessToken    String? @db.Text
    refreshToken   String? @db.Text
    bio            String? @db.Text

    role    Role     @default(PATIENT)
    patient Patient?
    doctor  Doctor?
    manager Manager?

    healthRecordConditions HealthRecordCondition[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Patient {
    user         User          @relation(fields: [id], references: [id], onDelete: Cascade)
    id           String
    healthRecord HealthRecord?

    appointments Appointment[]

    @@id([id])
}

model Manager {
    user User   @relation(fields: [id], references: [id], onDelete: Cascade)
    id   String

    @@id([id])
}

model HealthRecord {
    gender    Gender?
    bloodType String?
    height    Float?
    weight    Float?
    birthDate DateTime?
    bmi       Float?

    patient   Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
    patientId String  @unique

    healthRecordConditions HealthRecordCondition[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([patientId])
}

model Condition {
    id          String @id @default(uuid())
    name        String
    description String

    healthRecordConditions HealthRecordCondition[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model HealthRecordCondition {
    severity Severity      @default(LOW)
    note     String?       @default("")
    type     ConditionType
    from     DateTime?
    to       DateTime?

    healthRecord   HealthRecord @relation(fields: [healthRecordId], references: [patientId], onDelete: Cascade)
    healthRecordId String

    condition   Condition @relation(fields: [conditionId], references: [id], onDelete: Cascade)
    conditionId String

    lastUpdatedBy   User   @relation(fields: [lastUpdatedById], references: [id])
    lastUpdatedById String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([healthRecordId, conditionId])
}

model Specialty {
    id   String @id @default(uuid())
    name String

    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt
    doctorSpecialties DoctorSpecialty[]
    DoctorEducation   DoctorEducation[]

    @@unique([name])
}

model MedicalSchool {
    id    String  @id @default(uuid())
    name  String
    abbr  String
    image String?

    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    DoctorEducation DoctorEducation[]

    @@unique([name, abbr])
}

model DoctorEducation {
    doctorId        String
    medicalSchoolId String
    specialtyId     String

    degree        Degree
    medicalSchool MedicalSchool @relation(fields: [medicalSchoolId], references: [id])
    doctor        Doctor        @relation(fields: [doctorId], references: [id], onDelete: Cascade)

    year  String
    major Specialty @relation(fields: [specialtyId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([doctorId, medicalSchoolId, degree, year, specialtyId])
}

model DoctorSpecialty {
    doctorId    String
    specialtyId String
    experience  Int

    doctor    Doctor    @relation(fields: [doctorId], references: [id])
    specialty Specialty @relation(fields: [specialtyId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([doctorId, specialtyId])
}

model Doctor {
    user User   @relation(fields: [id], references: [id], onDelete: Cascade)
    id   String @unique

    appointments Appointment[]

    doctorEducations  DoctorEducation[]
    doctorSpecialties DoctorSpecialty[]
}

model Appointment {
    id    String   @id @default(uuid())
    date  DateTime
    notes String?

    status       Status
    patient      Patient       @relation(fields: [patientId], references: [id])
    patientId    String
    doctor       Doctor        @relation(fields: [doctorId], references: [id])
    doctorId     String
    prescription Prescription?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Prescription {
    conclusion String
    note       String @default("")

    medicinePrescriptions MedicinePrescription[]
    appointment           Appointment            @relation(fields: [appointmentId], references: [id])
    appointmentId         String                 @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([appointmentId])
}

model Medicine {
    id           String  @id @default(uuid())
    name         String
    image        String  @db.Text
    composition  String  @db.Text
    uses         String  @db.Text
    sideEffects  String  @db.Text
    manufacturer String
    capacity     String?

    medicinePrescriptions MedicinePrescription[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MedicinePrescription {
    medicineId     String
    prescriptionId String
    quantity       Int
    dosage         String?

    medicine     Medicine     @relation(fields: [medicineId], references: [id])
    prescription Prescription @relation(fields: [prescriptionId], references: [appointmentId])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([medicineId, prescriptionId])
}

enum Role {
    PATIENT
    DOCTOR
    MANAGER
}

enum Status {
    PENDING
    ACCEPTED
    REJECTED
    CANCELED
    FINISHED
}

enum Severity {
    LOW
    MEDIUM
    HIGH
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum Degree {
    DOCTOR_OF_MEDICINE
    RESIDENT_DOCTOR
    FIRST_DEGREE_SPECIALIST
    SECOND_DEGREE_SPECIALIST
    MASTER
    PHD
    ASSOCIATE_PROFESSOR
    PROFESSOR
}

enum ConditionType {
    DISEASE
    ALLERGY
    SYMPTOM
    PAST_SURGERY
    FAMILY_HISTORY
    OTHER
}
