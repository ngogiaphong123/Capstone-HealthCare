generator client {
    provider = "prisma-client-js"
}

generator dbml {
    provider = "prisma-dbml-generator"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id             String  @id @default(uuid())
    phone          String  @unique
    email          String? @unique
    password       String
    name           String
    address        String? @db.Text
    avatarPublicId String? @unique
    avatar         String  @db.Text
    accessToken    String? @db.Text
    refreshToken   String? @db.Text

    role                   Role                    @default(PATIENT)
    patient                Patient?
    doctor                 Doctor?
    healthRecordConditions HealthRecordCondition[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Patient {
    id String @id @default(uuid())

    user          User           @relation(fields: [userId], references: [id])
    userId        String         @unique
    healthRecords HealthRecord[]

    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    appointments  Appointment[]
    prescriptions Prescription[]
}

model HealthRecord {
    id        String   @id @default(uuid())
    gender    Gender
    bloodType String
    height    Int
    weight    Int
    birthDate DateTime
    bmi       Float

    patient   Patient @relation(fields: [patientId], references: [id])
    patientId String

    healthRecordConditions HealthRecordCondition[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Condition {
    id          String        @id @default(uuid())
    name        String
    description String
    type        ConditionType

    healthRecordConditions HealthRecordCondition[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model HealthRecordCondition {
    severity Severity @default(LOW)
    note     String?  @default("")

    healthRecord   HealthRecord @relation(fields: [healthRecordId], references: [id])
    healthRecordId String

    condition   Condition @relation(fields: [conditionId], references: [id])
    conditionId String

    user      User     @relation(fields: [userId], references: [id])
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([healthRecordId, conditionId])
}

enum ConditionType {
    DISEASE
    ALLERGY
    SYMPTOM
    PAST_SURGERY
    FAMILY_HISTORY
    OTHER
}

model Specialty {
    id   String @id @default(uuid())
    name String

    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt
    doctorSpecialties DoctorSpecialty[]

    @@unique([name])
}

model MedicalSchool {
    id   String @id @default(uuid())
    name String
    abbr String

    createdAt       DateTime          @default(now())
    updatedAt       DateTime          @updatedAt
    DoctorEducation DoctorEducation[]

    @@unique([name, abbr])
}

model DoctorEducation {
    doctorId        String
    medicalSchoolId String

    degree        Degree
    medicalSchool MedicalSchool @relation(fields: [medicalSchoolId], references: [id])
    doctor        Doctor        @relation(fields: [doctorId], references: [id])

    year String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([doctorId, medicalSchoolId])
}

model DoctorSpecialty {
    doctorId    String
    specialtyId String
    experience  Int

    doctor    Doctor    @relation(fields: [doctorId], references: [id])
    specialty Specialty @relation(fields: [specialtyId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([doctorId, specialtyId])
}

model Doctor {
    id String @id @default(uuid())

    user   User   @relation(fields: [userId], references: [id])
    userId String @unique

    appointments  Appointment[]
    prescriptions Prescription[]

    createdAt         DateTime          @default(now())
    updatedAt         DateTime          @updatedAt
    doctorEducations  DoctorEducation[]
    doctorSpecialties DoctorSpecialty[]
}

model Appointment {
    id    String   @id @default(uuid())
    date  DateTime
    notes String?

    status       Status
    patient      Patient       @relation(fields: [patientId], references: [id])
    patientId    String
    doctor       Doctor        @relation(fields: [doctorId], references: [id])
    doctorId     String
    prescription Prescription?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Prescription {
    id         String @id @default(uuid())
    conclusion String
    note       String @default("")

    patient               Patient                @relation(fields: [patientId], references: [id])
    patientId             String
    doctor                Doctor                 @relation(fields: [doctorId], references: [id])
    doctorId              String
    medicinePrescriptions MedicinePrescription[]
    appointment           Appointment            @relation(fields: [appointmentId], references: [id])
    appointmentId         String                 @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Medicine {
    id           String @id @default(uuid())
    name         String
    image        String @db.Text
    composition  String @db.Text
    uses         String @db.Text
    sideEffects  String @db.Text
    manufacturer String

    medicinePrescriptions MedicinePrescription[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model MedicinePrescription {
    medicineId     String
    prescriptionId String
    quantity       Int
    dosage         String?

    medicine     Medicine     @relation(fields: [medicineId], references: [id])
    prescription Prescription @relation(fields: [prescriptionId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@id([medicineId, prescriptionId])
}

enum Role {
    PATIENT
    DOCTOR
}

enum Status {
    PENDING
    ACCEPTED
    REJECTED
    CANCELED
    FINISHED
}

enum Severity {
    LOW
    MEDIUM
    HIGH
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum Degree {
    RESIDENT_TRAINING
    SPECIALIZED_LEVEL_1
    SPECIALIZED_LEVEL_2
    MASTER
    PHD
}
